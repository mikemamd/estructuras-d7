<?php
/**
 * Instalador de vocabularios y taxonomias
 * Implements hook_install().
 * @taxonomies
 *   node_category => Taxonomia para la clasificación de nodos
 *   test_category => Taxonomia de prueba
 */
function structureTaxonomy_install(){
  // Se declaran los Content Types
  $content_types = array(
    'blog_content' => array(
      'type'          => 'blog_content', // machine name
      'name'          => 'Estructuras D7 | Blog', // nombre en CMS
      'description'   => 'Use para cargar contenido en el blog',
      'title_label'   => 'Título',
      'base'          => 'node_content',
      'custom'        => TRUE,
    ),
    'test_content' => array(
      'type'          => 'test_content',
      'name'          => 'Estructuras D7 | Test',
      'description'   => 'Use para cargar contenido de prueba',
      'title_label'   => 'Título',
      'base'          => 'node_content',
      'custom'        => TRUE,
    ),
  );//end content_types

  // Mediante API de Drupal se crean los tipos de contenido
  foreach($content_types as $key => $content){
    $node_type = node_type_set_defaults($content);
    node_type_save($node_type);
  }//end foreach

  // Se limpian los caches de las instancias de fields
  field_info_cache_clear();

  // Se crean las instancias por tipo de contenido
  $entities = array(
    // Instances to content type
    'blog_content' => array(
      'Description' => array(
        'entity_type' => 'node',
        'field_name'  => 'body',
        'label'       => 'Body',
        'description' => 'Descripción del contenido',
        'required'    => TRUE,
        'widget'      => array(
          'type' => 'text_textarea_with_summary'
        ),
      ),
      'Imagen de Pie' => array(
        'entity_type' => 'node',
        'field_name'  => 'field_imgblog',
        'label'       => 'Imagen',
        'description' => 'Imagen para pie de entrada',
        'required'    => TRUE,
        'settings'    => array(
          'file_directory'  => 'field/image',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize'    => '',
          'max_resolution'  => '',
          'min_resolution'  => '',
          'alt_field'       => FALSE,
          'title_field'     => '',
        ),
      ),
    ), // End [blog_content]
    'test_content' => array(
      'Description' => array(
        'entity_type' => 'node',
        'field_name'  => 'body',
        'label'       => 'Body',
        'description' => 'Descripción del contenido',
        'required'    => TRUE,
        'widget'      => array(
          'type' => 'text_textarea_with_summary'
        ),
      ),
    ), // End [test_content]
  );

  // Se crean las instacias y se añaden a sus tipos de contenido
  foreach ($entities as $entity => $instances) {
    foreach ($instances as $instance) {
      $instance['bundle'] = $entity;
      field_create_instance($instance);
    }//end foreach
  }//end foreach

}

/**
 * Fución para remover content types y nodos después de desinstalar módulo
 * Implements hook_uninstall().
 * @content_types
 *   blog_content
 *   test_content
 */
function structureTaxonomy_uninstall() {
  $nids = [];

  /* Consulta todos los nodos creados de los tipos de contenido a eliminar */
  $qry = db_select('node', 'n');
  $qry->condition(db_or()
      ->condition('n.type', 'blog_content', '=')
      ->condition('n.type', 'test_content', '='));
  $qry->fields('n', ['nid']);
  $qry->orderBy('n.created', 'ASC');
  $results = $qry->execute()->fetchAll();

  // Elimina los nodos resultantes
  foreach ($results as $row) {
    $nids[] = $row->nid;
  }//end foreach
  node_delete_multiple( $nids );

  // Elimina los tipos de contenido y sus instancias
  $contents = [ 'blog_content', 'test_content' ];
  foreach($contents as $content){
    foreach( field_info_instances('node', $content) as $field_name => $instance ) {
      if(field_info_field($field_name)){
        field_delete_instance($instance);
      }//end if
    }//end foreach
    node_type_delete( (string) $content);
  }//end foreach

  // Limpia caches para desindexar lo necesario
  field_purge_batch(1000);
}
